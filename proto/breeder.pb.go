// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: breeder.proto

package breeder

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type DogReq struct {
	Breed                string   `protobuf:"bytes,1,opt,name=breed,proto3" json:"breed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DogReq) Reset()         { *m = DogReq{} }
func (m *DogReq) String() string { return proto.CompactTextString(m) }
func (*DogReq) ProtoMessage()    {}
func (*DogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a79614815d2ad695, []int{0}
}
func (m *DogReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DogReq.Unmarshal(m, b)
}
func (m *DogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DogReq.Marshal(b, m, deterministic)
}
func (m *DogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DogReq.Merge(m, src)
}
func (m *DogReq) XXX_Size() int {
	return xxx_messageInfo_DogReq.Size(m)
}
func (m *DogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DogReq.DiscardUnknown(m)
}

var xxx_messageInfo_DogReq proto.InternalMessageInfo

func (m *DogReq) GetBreed() string {
	if m != nil {
		return m.Breed
	}
	return ""
}

// The response message containing the greetings
type DogRes struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Image                []byte   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DogRes) Reset()         { *m = DogRes{} }
func (m *DogRes) String() string { return proto.CompactTextString(m) }
func (*DogRes) ProtoMessage()    {}
func (*DogRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_a79614815d2ad695, []int{1}
}
func (m *DogRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DogRes.Unmarshal(m, b)
}
func (m *DogRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DogRes.Marshal(b, m, deterministic)
}
func (m *DogRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DogRes.Merge(m, src)
}
func (m *DogRes) XXX_Size() int {
	return xxx_messageInfo_DogRes.Size(m)
}
func (m *DogRes) XXX_DiscardUnknown() {
	xxx_messageInfo_DogRes.DiscardUnknown(m)
}

var xxx_messageInfo_DogRes proto.InternalMessageInfo

func (m *DogRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *DogRes) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func init() {
	proto.RegisterType((*DogReq)(nil), "breeder.DogReq")
	proto.RegisterType((*DogRes)(nil), "breeder.DogRes")
}

func init() { proto.RegisterFile("breeder.proto", fileDescriptor_a79614815d2ad695) }

var fileDescriptor_a79614815d2ad695 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2a, 0x4a, 0x4d,
	0x4d, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xe4, 0xb8,
	0xd8, 0x5c, 0xf2, 0xd3, 0x83, 0x52, 0x0b, 0x85, 0x44, 0xb8, 0x58, 0xc1, 0x82, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x92, 0x19, 0x54, 0xbe, 0x58, 0x48, 0x8c, 0x8b, 0xad, 0xb8,
	0x24, 0xb1, 0xa4, 0xb4, 0x18, 0xac, 0x80, 0x23, 0x08, 0xca, 0x03, 0xe9, 0xcb, 0xcc, 0x4d, 0x4c,
	0x4f, 0x95, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0x70, 0x8c, 0xcc, 0xb9, 0xd8, 0x9d, 0x20,
	0x56, 0x08, 0xe9, 0x70, 0xb1, 0x05, 0xa7, 0x26, 0x16, 0x25, 0x67, 0x08, 0xf1, 0xeb, 0xc1, 0x5c,
	0x01, 0xb1, 0x53, 0x0a, 0x4d, 0xa0, 0x58, 0x89, 0xc1, 0x89, 0x3b, 0x8a, 0x53, 0x4f, 0x1f, 0x2a,
	0x9a, 0xc4, 0x06, 0x76, 0xad, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x89, 0x67, 0xf4, 0xdd, 0xbe,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BreederClient is the client API for Breeder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BreederClient interface {
	// Sends a greeting
	Search(ctx context.Context, in *DogReq, opts ...grpc.CallOption) (*DogRes, error)
}

type breederClient struct {
	cc *grpc.ClientConn
}

func NewBreederClient(cc *grpc.ClientConn) BreederClient {
	return &breederClient{cc}
}

func (c *breederClient) Search(ctx context.Context, in *DogReq, opts ...grpc.CallOption) (*DogRes, error) {
	out := new(DogRes)
	err := c.cc.Invoke(ctx, "/breeder.Breeder/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BreederServer is the server API for Breeder service.
type BreederServer interface {
	// Sends a greeting
	Search(context.Context, *DogReq) (*DogRes, error)
}

// UnimplementedBreederServer can be embedded to have forward compatible implementations.
type UnimplementedBreederServer struct {
}

func (*UnimplementedBreederServer) Search(ctx context.Context, req *DogReq) (*DogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterBreederServer(s *grpc.Server, srv BreederServer) {
	s.RegisterService(&_Breeder_serviceDesc, srv)
}

func _Breeder_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BreederServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/breeder.Breeder/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BreederServer).Search(ctx, req.(*DogReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Breeder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "breeder.Breeder",
	HandlerType: (*BreederServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Breeder_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "breeder.proto",
}
